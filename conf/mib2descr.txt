#sysDescr
"エージェントのハードウェア、ＯＳ、ネットワークソフト
に関する名前、バージョンなどをアスキー文字列で表した項目。
ほとんどのエージェントでは機器の名称などを記入している。

A textual description of the entity.  This value
should include the full name and version
identification of the system's hardware type,
software operating-system, and networking
software.  It is mandatory that this only contain
printable ASCII characters."

#sysObjectID

"エージェントのベンダーの製品識別番号を表すオブジェクトＩＤで、
そのＩＤ内に企業サブツリー(1.3.6.1.4.1)に配置された企業番号と、
そのベンダーのどの製品かを特定する製品番号を含んでいます。
例えば、「＊＊社」の企業番号が、(1.3.6.1.4.1.4242)であれば、
その会社のルーターは、(1.3.6.1.4.1.4242.1.1)というsysObjectIDを設定
できます。従って、この値をよむことによりどのベンダーの製品かを
確認することが出来ます。

The vendor's authoritative identification of the
network management subsystem contained in the
entity.  This value is allocated within the SMI
enterprises subtree (1.3.6.1.4.1) and provides an
easy and unambiguous means for determining `what
kind of box' is being managed.  For example, if
vendor `Flintstones, Inc.' was assigned the
subtree 1.3.6.1.4.1.4242, it could assign the
identifier 1.3.6.1.4.1.4242.1.1 to its `Fred
Router'."

#sysUpTime

"エージェントのネットワーク管理機構（ＳＮＭＰエージェントソフト）
が起動されてからの経過時間。１カウントで１００分の１秒で
表される。

The time (in hundredths of a second) since the
network management portion of the system was last
re-initialized."

#sysContact
"このエージェント機器を管理している人の名前
と連絡先を文字列で表します。
管理者、管理部門名と内線番号を書きます。

The textual identification of the contact person
for this managed node, together with information
on how to contact this person."

#sysName
"このエージェントに管理のためにつけられた
名前で、ドメイン名等を記入します。

An administratively-assigned name for this
managed node.  By convention, this is the node's
fully-qualified domain name."

#sysLocation
"このエージェントの設置されている物理的な場所を
表します。例えば、３階のシステム室など。

The physical location of this node (e.g.,
`telephone closet, 3rd floor')."

#sysServices
"この値は、このエージェント機器のプロトコル階層のサービスを
を表します。この値は、プロトコル階層をＬとしてＬ＝１～７で、
その階層のサービスを持っている場合には、２＾（Ｌー１）を加えます。
例えば、一般的なＵＮＩＸホストでは、Ｌ＝４のＩＰルーター機能と
Ｌ＝７のアプリケーション（メールなど）を持っているのでこの値は
（２＾（４ー１）＋２＾（７ー１））＝７２を設定します。
プロトコル階層の定義は、
 １ 物理層 （リピーター等）
 ２ リンク層／サブネットワーク層（ブリッジ等）
 ３ インターネット層（ＩＰ等）
 ４ エンドツーエンド（ＩＰホスト）
 ７ アプリケーション（メール等）

ＯＳＩプロトコルを含むシステムでは５、６層もカウントする。



A value which indicates the set of services that
this entity primarily offers.
The value is a sum.  This sum initially takes the
value zero, Then, for each layer, L, in the range
1 through 7, that this node performs transactions
for, 2 raised to (L - 1) is added to the sum.  For
Example, a node which performs primarily routing
functions would have a value of 4 (2^(3-1)).  In
contrast, a node which is a host offering
application services would have a value of 72
(2^(4-1) + 2^(7-1)).  Note that in the context of
the Internet suite of protocols, values should be
calculated accordingly:

layer  functionality
    1  physical (e.g., repeaters)
    2  datalink/subnetwork (e.g., bridges)
    3  internet (e.g., IP gateways)
    4  end-to-end  (e.g., IP hosts)
    7  applications (e.g., mail relays)
 For systems including OSI protocols, layers 5 and
 6 may also be counted."



#ifNumber

"このシステムにあるネットワークインターフェイスの数

The number of network interfaces (regardless of
their current state) present on this system."

#ifTable
"ネットワークインターフェイステーブル
エントリー数は、ifNumberの数である。

A list of interface entries.  The number of
entries is given by the value of ifNumber."

#ifEntry
"インターフェイステーブルエントリー
An interface entry containing objects at the
subnetwork layer and below for a particular
interface."

#ifIndex

"インターフェイス識別番号、この値は１からifNumberまでの
値になる。この値は、エージェントのネットワーク管理機能が
動作中（再初期化されるまで）は固定値をとる必要がある。

A unique value for each interface.  Its value
ranges between 1 and the value of ifNumber.  The
value for each interface must remain constant at
least from one re-initialization of the entity's
network management system to the next re-
initialization."

#ifDescr

"文字列で表現したインターフェイスに関する情報。
この文字列には、ハードウェアインターフェイスのメーカー名、プロダクト
名バージョン番号等が記載される。

A textual string containing information about the
interface.  This string should include the name of
the manufacturer, the product name and the version
of the hardware interface."

#ifType

"プロトコルスタックのネットワーク層のすぐ下に位置する物理層／リンク
プロトコルのインターフェイスタイプを表す。

The type of interface, distinguished according to
the physical/link protocol(s) immediately `below'
the network layer in the protocol stack."

#ifMtu

"バイト単位で表したこのインターフェイスでの最大送受信可能データグラム
のサイズ。ＭＴＵ値。

The size of the largest datagram which can be
sent/received on the interface, specified in
octets.  For interfaces that are used for
transmitting network datagrams, this is the size
of the largest network datagram that can be sent
on the interface."

#ifSpeed
"ビット／秒で表したインターフェイスの転送速度。

An estimate of the interface's current bandwidth
in bits per second.  For interfaces which do not
vary in bandwidth or for those where no accurate
estimation can be made, this object should contain
the nominal bandwidth."

#ifPhysAddress
"インターフェイスの物理アドレス
シリアルラインのように物理アドレスを持たないものは
長さ０のオクテットストリングにする。

The interface's address at the protocol layer
immediately `below' the network layer in the
protocol stack.  For interfaces which do not have
such an address (e.g., a serial line), this object
should contain an octet string of zero length."

#ifAdminStatus
"インターフェイスの管理状態

The desired state of the interface.  The
testing(3) state indicates that no operational
packets can be passed."

#ifOperStatus
"インターフェイス動作状態
 １：動作中
 ２：停止中
 ３：テスト中

The current operational state of the interface.
The testing(3) state indicates that no operational
packets can be passed."

#ifLastChange
"インターフェイスの動作状態ifOperStatusが最後に変更された時点の
sysUpTimeの値。もし、ネットワーク管理サブシステムが再初期化された
時点からインターフェイスの状態が変更されていない場合にはこの値は
０になります。

The value of sysUpTime at the time the interface
entered its current operational state.  If the
current state was entered prior to the last re-
initialization of the local network management
subsystem, then this object contains a zero
value."

#ifInOctets
"このインターフェイスが受信したバイト数、
この値には同期バイトも含まれる。

The total number of octets received on the
interface, including framing characters."

#ifInUcastPkts
"受信して上位層におくられたサブネットワーク
ユニキャストパケットの数。

The number of subnetwork-unicast packets
delivered to a higher-layer protocol."

#ifInNUcastPkts
"受信して上位層に送られたブロードキャスト、
マルチキャストパケットの数。
The number of non-unicast (i.e., subnetwork-
broadcast or subnetwork-multicast) packets
delivered to a higher-layer protocol."

#ifInDiscards
"バッファフル等の理由により正常パケットであるにもかかわらず
捨てられた受信パケットの数。

The number of inbound packets which were chosen
to be discarded even though no errors had been
detected to prevent their being deliverable to a
higher-layer protocol.  One possible reason for
discarding such a packet could be to free up
buffer space."

#ifInErrors
"受信エラーパケット数。

The number of inbound packets that contained
errors preventing them from being deliverable to a
higher-layer protocol."

#ifInUnknownProtos
"不正なプロトコルか又は、未サポートのプロトコルのため
破棄されて受信パケット数。

The number of packets received via the interface
which were discarded because of an unknown or
unsupported protocol."

#ifOutOctets
"同期キャラクタを含む、送信したトータルバイト数。

The total number of octets transmitted out of the
interface, including framing characters."

#ifOutUcastPkts
"上位プロトコルからのユニキャストでの送信要求パケット数。
この中には、送信されなかったパケットも含む。

The total number of packets that higher-level
protocols requested be transmitted to a
subnetwork-unicast address, including those that
were discarded or not sent."

#ifOutNUcastPkts
"上位プロトコルからのブロードキャスト、マルチキャストでの
送信要求数。破棄パケット、未送信パケット数も含む。

The total number of packets that higher-level
protocols requested be transmitted to a non-
unicast (i.e., a subnetwork-broadcast or
subnetwork-multicast) address, including those
that were discarded or not sent."

#ifOutDiscards
"送信バッファフル等により送信されずに破棄された
パケット数。

The number of outbound packets which were chosen
to be discarded even though no errors had been
detected to prevent their being transmitted.  One
possible reason for discarding such a packet could
be to free up buffer space."

#ifOutErrors
"エラーのため送信されなかったパケット数。

The number of outbound packets that could not be
transmitted because of errors."

#ifOutQLen
"送信キューの長さ（パケット数で表す。）

The length of the output packet queue (in
packets)."

#ifSpecific
"使用しているインターフェイスのメディア特有のＭＩＢ
定義のオブジェクト識別番号。
例としてイーサネットの場合にはイーサネットを定義
したＭＩＢのオブジェクト識別番号を設定する。
もし、情報がない場合には、０．０を指定する。


A reference to MIB definitions specific to the
particular media being used to realize the
interface.  For example, if the interface is
realized by an ethernet, then the value of this
object refers to a document defining objects
specific to ethernet.  If this information is not
present, its value should be set to the OBJECT
IDENTIFIER { 0 0 }, which is a syntatically valid
object identifier, and any conformant
implementation of ASN.1 and BER must be able to
generate and recognize this value."



#atTable
"アドレス変換テーブルは、ネットワークアドレスと
物理アドレスの関係を示すテーブルである。
Ｘ．２５等の幾つかのインターフェイスはアドレス変換
テーブルを使用せずにアルゴリズムで変換している。
もし、すべてのインターフェイスがこの種の
インターフェイスであればこのテーブルは空になる。

The Address Translation tables contain the
NetworkAddress to `physical' address equivalences.
Some interfaces do not use translation tables for
determining address equivalences (e.g., DDN-X.25
has an algorithmic method); if all interfaces are
of this type, then the Address Translation table
is empty, i.e., has zero entries."

#atEntry
"それぞれのエントリーは、ネットワークアドレスから
物理アドレスへの対応を示している。

Each entry contains one NetworkAddress to
`physical' address equivalence."

#atIfIndex
"この変換エントリーの関連するインターフェイスを
識別する値で、ifIndexの値と同じものを使用する。

The interface on which this entry's equivalence
is effective.  The interface identified by a
particular value of this index is the same
interface as identified by the same value of
ifIndex."

#atPhysAddress
"メディアに依存する物理アドレス
この値をＮＵＬＬ（長さ０のバイト列）にＳＥＴを
実行した場合にこのテーブルのエントリーを無効にする
ことを意味する。

The media-dependent `physical' address.
Setting this object to a null string (one of zero
length) has the effect of invaliding the
corresponding entry in the atTable object.  That
is, it effectively dissasociates the interface
identified with said entry from the mapping
identified with said entry.  It is an
implementation-specific matter as to whether the
agent removes an invalidated entry from the table.
Accordingly, management stations must be prepared
to receive tabular information from agents that
corresponds to entries not currently in use.
Proper interpretation of such entries requires
examination of the relevant atPhysAddress object."

#atNetAddress
"物理アドレスと対になるネットワークアドレス（ＩＰアドレス）

The NetworkAddress (e.g., the IP address)
corresponding to the media-dependent `physical'
address."

#ipForwarding
"この値は、エージェントがＩＰゲートウェイとして
受信したＩＰデータグラムを他へ転送する機能を
持っているかどうか示します。
ＩＰゲートウェイは、データグラムの転送を行いますが、
ＩＰホストは、ソースルーティングを除いて転送を行いません。
注意点としては、幾つかのノードは可能値のサブセットを
のみをサポートしています。
従って、マネージャーからこのオブジェクトを変更しようと
した場合、badValueエラーの応答をします。

The indication of whether this entity is acting
as an IP gateway in respect to the forwarding of
datagrams received by, but not addressed to, this
entity.  IP gateways forward datagrams.  IP hosts
do not (except those source-routed via the host).
Note that for some managed nodes, this object may
take on only a subset of the values possible.
Accordingly, it is appropriate for an agent to
return a `badValue' response if a management
station attempts to change this object to an
inappropriate value."

#ipDefaultTTL
"ＩＰデータグラムのヘッダのＴＴＬ
のデフォルト値。
ＴＴＬ値が上位のトランスポートレイアから指定された場合には
その値となる。

The default value inserted into the Time-To-Live
field of the IP header of datagrams originated at
this entity, whenever a TTL value is not supplied
by the transport layer protocol."

#ipInReceives

"受信エラーのＩＰデータグラムを含む、受信ＩＰデータグラムの
総数。

The total number of input datagrams received from
interfaces, including those received in error."

#ipInHdrErrors
"ＩＰヘッダエラーのために破棄されたデータグラムの
数。この中には、チェックサムエラー、バージョンの
不一致、その他のフォーマットエラー、ＴＴＬ値の超過
ＩＰヘッダオプションのエラー等が含まれる。

The number of input datagrams discarded due to
errors in their IP headers, including bad
checksums, version number mismatch, other format
errors, time-to-live exceeded, errors discovered
in processing their IP options, etc."

#ipInAddrErrors

"ＩＰヘッダの宛て先アドレスの問題のために捨てられた
ＩＰデータグラムの数を示す。
このカウンタには、不正なアドレス（０．０．０．０）や
サポートしていないアドレスクラス（クラスＥ）を
含んでいます。
ＩＰゲートウェイ機能のないノードでは、自ノード宛で
ないアドレスのＩＰデータグラム数も含む。

The number of input datagrams discarded because
the IP address in their IP header's destination
field was not a valid address to be received at
this entity.  This count includes invalid
addresses (e.g., 0.0.0.0) and addresses of
unsupported Classes (e.g., Class E).  For entities
which are not IP Gateways and therefore do not
forward datagrams, this counter includes datagrams
discarded because the destination address was not
a local address."

#ipForwDatagrams

"最終宛て先に転送されたＩＰデータグラムの数。
もし、このノードがＩＰゲートウェイとして
動作しない場合には、この数はソースルーティング
で転送に成功した数になる。
The number of input datagrams for which this
entity was not their final IP destination, as a
result of which an attempt was made to find a
route to forward them to that final destination.
In entities which do not act as IP Gateways, this
counter will include only those packets which were
Source-Routed via this entity, and the Source-
Route option processing was successful."

#ipInUnknownProtos
"自ノード宛のＩＰデータグラムのうち
プロトコルが不明又は、未サポートであるため
に破棄されたデータグラムの数。

The number of locally-addressed datagrams
received successfully but discarded because of an
unknown or unsupported protocol."

#ipInDiscards
"正常に受信したＩＰデータグラムの内
バッファスペース等の内部的な問題により破棄された
ＩＰデータグラムの数。
このカウンタには、Re-assembly待ち中に破棄された
数は含まれない。

The number of input IP datagrams for which no
problems were encountered to prevent their
continued processing, but which were discarded
(e.g., for lack of buffer space).  Note that this
counter does not include any datagrams discarded
while awaiting re-assembly."

#ipInDelivers
"ＩＰユーザプロトコル（ＩＣＭＰを含む上位プロトコル）に
配送されたデータグラムの数。

The total number of input datagrams successfully
delivered to IP user-protocols (including ICMP)."

#ipOutRequests

"ローカルＩＰユーザプロトコル（ＩＣＭＰを含む）が
ＩＰデータグラムの送信要求を実行した数。
このカウンタは、ipForwDatagramsを含まない。

The total number of IP datagrams which local IP
user-protocols (including ICMP) supplied to IP in
requests for transmission.  Note that this counter
does not include any datagrams counted in
ipForwDatagrams."

#ipOutDiscards

"バッファ不足等で、送信出来ずに破棄されたＩＰデータグラム
の数。ＩＰデータグラム自信には問題がない場合。
このカウンタには、ipForwDatagramsにより送信要求で破棄された
数も含む。

The number of output IP datagrams for which no
problem was encountered to prevent their
transmission to their destination, but which were
discarded (e.g., for lack of buffer space).  Note
that this counter would include datagrams counted
in ipForwDatagrams if any such packets met this
(discretionary) discard criterion."

#ipOutNoRoutes
"送信時の宛て先へのルートがないため破棄されたＩＰ
データグラムの数。このカウンタは、ipForwDatagramsで
転送しようとしたＩＰデータグラムのうちno-routeの
ため破棄されたデータグラムも含む。
この値は、デフォルトゲートウェイがダウンしているために
転送できないデータグラムの数である。

The number of IP datagrams discarded because no
route could be found to transmit them to their
destination.  Note that this counter includes any
packets counted in ipForwDatagrams which meet this
`no-route' criterion.  Note that this includes any
datagarms which a host cannot route because all of
its default gateways are down."

#ipReasmTimeout
"フラグメントされたＩＰデータグラムを受信した場合
再組み立てを行うため全ＩＰデータグラムの受信
を待つ時間の最大値を示す。

The maximum number of seconds which received
fragments are held while they are awaiting
reassembly at this entity."

#ipReasmReqds

"このエンティティで再組み立ての必要な
フラグメントされたＩＰデータグラムの受信数。

The number of IP fragments received which needed
to be reassembled at this entity."

#ipReasmOKs
"受信したフラグメントＩＰデータグラムのうち
再組み立てに成功した数。

The number of IP datagrams successfully re-
assembled."

#ipReasmFails
"受信フラグメントＩＰデータグラムのうち
再組み立てに失敗した数。
失敗した理由としては、タイムアウトエラー等がある。
ＲＦＣ８１５のようなアルゴリズムを使用したフラグメント数
が不正確の場合には、破棄されたフラグメントＩＰデータグラムの
数のカウントは不要である。


The number of failures detected by the IP re-
assembly algorithm (for whatever reason: timed
out, errors, etc).  Note that this is not
necessarily a count of discarded IP fragments
since some algorithms (notably the algorithm in
RFC 815) can lose track of the number of fragments
by combining them as they are received."

#ipFragOKs
"このエンティティでフラグメントに成功した
データグラムの数。

The number of IP datagrams that have been
successfully fragmented at this entity."

#ipFragFails
"このエンティティでフラグメントが必要になったが、
フラグメント不可のフラグがセットされている等の
理由でフラグメント出来ずに破棄されたデータグラム
の数。

The number of IP datagrams that have been
discarded because they needed to be fragmented at
this entity but could not be, e.g., because their
Don't Fragment flag was set."

#ipFragCreates
"このエンティティでのフラグメンテーションの結果として
生成されたフラグメントＩＰデータグラムの数。

The number of IP datagram fragments that have
been generated as a result of fragmentation at
this entity."

#ipAddrTable
"ＩＰアドレス別のアドレス情報テーブル。

The table of addressing information relevant to
this entity's IP addresses."

#ipAddrEntry
"ＩＰアドレス別のアドレス情報。
The addressing information for one of this
entity's IP addresses."

#ipAdEntAddr
"このエントリーのアドレス情報に属するＩＰアドレス。

The IP address to which this entry's addressing
information pertains."

#ipAdEntIfIndex
"このＩＰアドレスに対応した、インターフェイスの識別
番号、この値はifIndexの番号と同じである。

The index value which uniquely identifies the
interface to which this entry is applicable.  The
interface identified by a particular value of this
index is the same interface as identified by the
same value of ifIndex."

#ipAdEntNetMask
"このＩＰアドレスに関連したサブネットマスク値。
このマスク値は、ネットワークビットを１、ホストビットを
０としたＩＰアドレスとして表される。

The subnet mask associated with the IP address of
this entry.  The value of the mask is an IP
address with all the network bits set to 1 and all
the hosts bits set to 0."

#ipAdEntBcastAddr
"このエントリーのＩＰアドレスの（論理）インターフェイス
上で送信されるブロードキャストで使用されるＩＰブロードキャスト
アドレスの最下位ビットの値。
インターネットスタンダードでは全ビット１のアドレスが
ブロードキャストとして使用される。その場合
この値は１となる。この値は、サブネットブロードキャスト
ネットワークブロードキャストの双方を指定する。

The value of the least-significant bit in the IP
broadcast address used for sending datagrams on
the (logical) interface associated with the IP
address of this entry.  For example, when the
Internet standard all-ones broadcast address is
used, the value will be 1.  This value applies to
both the subnet and network broadcasts addresses
used by the entity on this (logical) interface."

#ipAdEntReasmMaxSize
"このインターフェイスで受信したフラグメントＩＰ
データグラムからこのエンティティで再組立可能な
最大ＩＰデータグラムサイズ。

The size of the largest IP datagram which this
entity can re-assemble from incoming IP fragmented
datagrams received on this interface."

#ipRouteTable
"ＩＰルーティングテーブル。

This entity's IP Routing table."

#ipRouteEntry
"特定宛て先に対するルート
A route to a particular destination."

#ipRouteDest
"このルートの宛て先ＩＰアドレス。
このエントリーが0.0.0.0の場合は、デフォルト
ルートを示す。同一宛て先アドレスに対して複数の
ルートを定義可能だが、そのアクセス方法は、管理プロトコルの
テーブルアクセス方式に依存する。

The destination IP address of this route.  An
entry with a value of 0.0.0.0 is considered a
default route.  Multiple routes to a single
destination can appear in the table, but access to
such multiple entries is dependent on the table-
access mechanisms defined by the network
management protocol in use."

#ipRouteIfIndex
"このルートの次の宛て先ホストに送信するためのインターフェイス
の識別番号。
この識別番号は、インターフェイスを特定するために
ifIndexと同じ番号をする。

The index value which uniquely identifies the
local interface through which the next hop of this
route should be reached.  The interface identified
by a particular value of this index is the same
interface as identified by the same value of
ifIndex."

#ipRouteMetric1
"このルートのプライマリールーティングメトリック。
このメトリックの意味は、ルーターのipRouteProto値により
示されるルーティングプロトコルにより決まる。
もし、メトリックが使用されていない場合にはー１
が設定される。

The primary routing metric for this route.  The
semantics of this metric are determined by the
routing-protocol specified in the route's
ipRouteProto value.  If this metric is not used,
its value should be set to -1."

#ipRouteMetric2
"このルートのオルタネートルーティングメトリック。
このメトリックの意味は、ルーターのipRouteProto値により
示されるルーティングプロトコルにより決まる。
もし、メトリックが使用されていない場合にはー１
が設定される。

An alternate routing metric for this route.  The
semantics of this metric are determined by the
routing-protocol specified in the route's
ipRouteProto value.  If this metric is not used,
its value should be set to -1."

#ipRouteMetric3
"このルートのオルタネートルーティングメトリック。
このメトリックの意味は、ルーターのipRouteProto値により
示されるルーティングプロトコルにより決まる。
もし、メトリックが使用されていない場合にはー１
が設定される。

An alternate routing metric for this route.  The
semantics of this metric are determined by the
routing-protocol specified in the route's
ipRouteProto value.  If this metric is not used,
its value should be set to -1."

#ipRouteMetric4
"このルートのオルタネートルーティングメトリック。
このメトリックの意味は、ルーターのipRouteProto値により
示されるルーティングプロトコルにより決まる。
もし、メトリックが使用されていない場合にはー１
が設定される。

An alternate routing metric for this route.  The
semantics of this metric are determined by the
routing-protocol specified in the route's
ipRouteProto value.  If this metric is not used,
its value should be set to -1."

#ipRouteNextHop
"このルートの次のＨＯＰのＩＰアドレス。
（ブロードキャストメディアにより接続されたルートの場合
この値は、そのインターフェイス上のエージェントアドレスになる。）

The IP address of the next hop of this route.
(In the case of a route bound to an interface
which is realized via a broadcast media, the value
of this field is the agent's IP address on that
interface.)"

#ipRouteType
"ルートの種類。
     other(1),        -- 以下のいずれでない場合。
     invalid(2),      -- 不正なルート
     direct(3),       -- 直接接続
    indirect(4)      -- 間接接続(LOCALに接続されていない。）

３または、４については、ＩＰアーキテクチャの
直接／間接ルートに関しての記述を参照。
このオブジェクトの値をinvalid(2)に設定する
ことによりテーブルのこのエントリーを無効にする
ことができる。

The type of route.  Note that the values
direct(3) and indirect(4) refer to the notion of
direct and indirect routing in the IP
architecture.
Setting this object to the value invalid(2) has
the effect of invalidating the corresponding entry
in the ipRouteTable object.  That is, it
effectively dissasociates the destination
identified with said entry from the route
identified with said entry.  It is an
implementation-specific matter as to whether the
agent removes an invalidated entry from the table.
Accordingly, management stations must be prepared
to receive tabular information from agents that
corresponds to entries not currently in use.
Proper interpretation of such entries requires
examination of the relevant ipRouteType object."



#ipRouteProto
"このルートを学習したルーティング方式を示す。
ゲートウェイルーティングプロトコルのための
値を含んでいることは、ホストにこれらのプロトコル
をサポートすることを強制するものではない。

次の値が定義されている。
          other(1) ：下記以外
          local(2) ：ローカルマシン上で設定されたルート
          netmgmt(3)：ネットワーク管理機能により設定された。
          icmp(4) ：ＩＣＭＰの Redirect等により設定された。
この下が、ゲートウェイプロトコル。
          egp(5)    ：ＥＧＰ
          ggp(6) ：ＧＧＰ
         hello(7) ：ハロー
          rip(8) ：ＲＩＰ
          is-is(9)
          es-is(10)
         ciscoIgrp(11)
          bbnSpfIgp(12)
          ospf(13) ：ＯＳＰＦ
          bgp(14)

The routing mechanism via which this route was
learned.  Inclusion of values for gateway routing
protocols is not intended to imply that hosts
should support those protocols."

#ipRouteAge
"このルートが最後に正常なルートとして確認された時点
からの経過時間を秒でしめす。
ルートを学習したルーティングプロトコルでの判断以外には
このルート情報をtoo old（古い）ということを意味する
定義はない。

The number of seconds since this route was last
updated or otherwise determined to be correct.
Note that no semantics of `too old' can be implied
except through knowledge of the routing protocol
by which the route was learned."


#ipRouteMask
"宛て先アドレスとipRouteDestと比較する前に
論理ＡＮＤを行う値を示す。
任意のサブネットマスク値をサポートしていないシステムでは
この値は、ipRouteDestフィールドのアドレスクラスにより決まる。
クラス毎のマスク値は次の値。

クラスＡ：255.0.0.0
クラスＢ：255.255.0.0
クラスＣ：255.255.255.0

ipRouteDestが0.0.0.0の場合は、このマスク値も
0.0.0.0にする。
この方法は、ＩＰルーティングでは暗黙の了解
となっている。

Indicate the mask to be logical-ANDed with the
destination address before being compared to the
value in the ipRouteDest field.  For those systems
that do not support arbitrary subnet masks, an
agent constructs the value of the ipRouteMask by
determining whether the value of the correspondent
ipRouteDest field belong to a class-A, B, or C
network, and then using one of:

mask           network
255.0.0.0      class-A
255.255.0.0    class-B
255.255.255.0  class-C

If the value of the ipRouteDest is 0.0.0.0 (a
default route), then the mask value is also
0.0.0.0.  It should be noted that all IP routing
subsystems implicitly use this mechanism."

#ipRouteMetric5

"このルートのオルタネートルーティングメトリック。
このメトリックの意味は、ルーターのipRouteProto値により
示されるルーティングプロトコルにより決まる。
もし、メトリックが使用されていない場合にはー１
が設定される。

An alternate routing metric for this route.  The
semantics of this metric are determined by the
routing-protocol specified in the route's
ipRouteProto value.  If this metric is not used,
its value should be set to -1."

#ipRouteInfo
"このルートで使用されるルーティングプロトコルに
についてのＭＩＢ上の定義番号。
もし定義されていないものであれば、オブジェクトＩＤ
0.0を指定する。

A reference to MIB definitions specific to the
particular routing protocol which is responsible
for this route, as determined by the value
specified in the route's ipRouteProto value.  If
this information is not present, its value should
be set to the OBJECT IDENTIFIER { 0 0 }, which is
a syntatically valid object identifier, and any
conformant implementation of ASN.1 and BER must be
able to generate and recognize this value."

#ipNetToMediaTable
"ＩＰアドレス変換テーブルは、ＩＰアドレスから
物理アドレスへの変換テーブルである。

The IP Address Translation table used for mapping
from IP addresses to physical addresses."

#ipNetToMediaEntry
"各エントリーはＩＰアドレスと物理アドレスの対応関係を
示す。

Each entry contains one IpAddress to `physical'
address equivalence."

#ipNetToMediaIfIndex
"このエントリーのインターフェイス識別番号。
この値は、ifIndexの値を使用する。

The interface on which this entry's equivalence
is effective.  The interface identified by a
particular value of this index is the same
interface as identified by the same value of
ifIndex."

#ipNetToMediaPhysAddress
"メディアに依存した物理アドレス。

The media-dependent `physical' address."

#ipNetToMediaNetAddress
"このエントリーの物理アドレスに対応したＩＰアドレス。

The IpAddress corresponding to the media-
dependent `physical' address."

#ipNetToMediaType
"アドレス変換の方式。
次の種類が定義されている。
   other(1)   ：下記以外の方式
   invalid(2) ：無効な値
   dynamic(3) ：動的変換
   static(4)  ：静的変換

このテーブルを無効にするためには、テーブルの
この項目にinvalid(2)をＳＥＴする。
無効なエントリーの削除等は、インプリメントに依存する。
また、マネージャでは、無効なエントリーを認識する
ことが必要である。

The type of mapping.
Setting this object to the value invalid(2) has
the effect of invalidating the corresponding entry
in the ipNetToMediaTable.  That is, it effectively
dissasociates the interface identified with said
entry from the mapping identified with said entry.
It is an implementation-specific matter as to
whether the agent removes an invalidated entry
from the table.  Accordingly, management stations
must be prepared to receive tabular information
from agents that corresponds to entries not
currently in use.  Proper interpretation of such
entries requires examination of the relevant
ipNetToMediaType object."


#ipRoutingDiscards
"メモリ不足等の理由により破棄された有効なルーティング
情報の数。

The number of routing entries which were chosen
to be discarded even though they are valid.  One
possible reason for discarding such an entry could
be to free-up buffer space for other routing
entries."

#icmpInMsgs
"ＩＣＭＰの受信総数。エラーＩＣＭＰも含む。

The total number of ICMP messages which the
entity received.  Note that this counter includes
all those counted by icmpInErrors."

#icmpInErrors
"受信したＩＣＭＰのうち、チェックサムエラー、長さエラー
等のＩＣＭＰ仕様エラーのため破棄した数。

The number of ICMP messages which the entity
received but determined as having ICMP-specific
errors (bad ICMP checksums, bad length, etc.)."

#icmpInDestUnreachs
"ICMP 宛て先未到達メッセージの受信回数。
The number of ICMP Destination Unreachable
messages received."

#icmpInTimeExcds
"ICMP Time Exceededメッセージの受信回数。

The number of ICMP Time Exceeded messages
received."

#icmpInParmProbs
"ICMP パラメータ不正メッセージの受信回数。

The number of ICMP Parameter Problem messages  
received."

#icmpInSrcQuenchs
"ICMP ソースクエンチの受信回数。

The number of ICMP Source Quench messages
received."

#icmpInRedirects
"ICMPリダイレクトの受信回数。

The number of ICMP Redirect messages received."

#icmpInEchos
"ICMP エコーリクエストメッセージの受信回数。

The number of ICMP Echo (request) messages
received."

#icmpInEchoReps
"ICMP エコーリプライメッセージを受信した数。

The number of ICMP Echo Reply messages received."

#icmpInTimestamps
"ICMP タイムスタンプ リクエストメッセージを受信した数。

The number of ICMP Timestamp (request) messages
received."

#icmpInTimestampReps
"ICMP タイムスタンプリプライを受信した数。

The number of ICMP Timestamp Reply messages
received."

#icmpInAddrMasks
"ICMP アドレスマスクリクエストを受信した数。

The number of ICMP Address Mask Request messages
received."

#icmpInAddrMaskReps
"ICMP アドレスマスク応答メッセージを受信した数。

The number of ICMP Address Mask Reply messages
received."

#icmpOutMsgs
"ICMP メッセージを送信した総数。
このカウンタには、icmpOutErrorsのカウントも含まれる。


The total number of ICMP messages which this
entity attempted to send.  Note that this counter
includes all those counted by icmpOutErrors."

#icmpOutErrors
"ＩＣＭＰメッセージの送信時にバッファフル等の理由により
送信出来ずに破棄された数。
このカウンタには、ＩＣＭＰ層以外でのエラー（
ＩＰでのルート不定のための送信不可等）は含まれていない。

The number of ICMP messages which this entity did
not send due to problems discovered within ICMP
such as a lack of buffers.  This value should not
include errors discovered outside the ICMP layer
such as the inability of IP to route the resultant
datagram.  In some implementations there may be no
types of error which contribute to this counter's
value."

#icmpOutDestUnreachs
"ICMP 宛て先未到達の送信回数。

The number of ICMP Destination Unreachable
messages sent."

#icmpOutTimeExcds
"ICMP Time Exceededの送信回数。

The number of ICMP Time Exceeded messages sent."

#icmpOutParmProbs
"ICMP パラメータ不正の送信回数。

The number of ICMP Parameter Problem messages
sent."

#icmpOutSrcQuenchs
"ICMP ソースクエンチの送信回数。

The number of ICMP Source Quench messages sent."

#icmpOutRedirects
"ICMP リダイレクトメッセージの送信回数。
ホストでは、このオブジェクトは常に０である。
ホストはこのメッセージを送信しない。

The number of ICMP Redirect messages sent.  For a
host, this object will always be zero, since hosts
do not send redirects."

#icmpOutEchos
"ICMP エコーリクエストの送信回数。

The number of ICMP Echo (request) messages sent."

#icmpOutEchoReps
"ICMP エコー応答の送信回数。

The number of ICMP Echo Reply messages sent."

#icmpOutTimestamps
"ICMP タイムスタンプリクエストの送信回数。

The number of ICMP Timestamp (request) messages
sent."

#icmpOutTimestampReps
"ICMP タイムスタンプ応答の送信回数。

The number of ICMP Timestamp Reply messages
sent."

#icmpOutAddrMasks
"ICMP アドレスマスクリクエストの送信回数。

The number of ICMP Address Mask Request messages
sent."

#icmpOutAddrMaskReps
"ICMP アドレスマスク応答の受信回数。

The number of ICMP Address Mask Reply messages
sent."



#tcpRtoAlgorithm
"ＴＣＰ接続での再送信タイムアウト値決定アルゴリズム
次の値が定義されている。

	other(1)	 	：下記以外,    -- none of the following
	constant(2) 	：固定値, -- a constant rto
	rsre(3)     	：MIL-STD-1778 標準
	vanj(4)      	： Van Jacobson's algorithm


The algorithm used to determine the timeout value
used for retransmitting unacknowledged octets."

#tcpRtoMin
"ＴＣＰプロトコルのインプリメントで許容されている
再送信タイムアウト値の最少値。
１００分の１秒単位の値。
この値の詳細な意味については、使用している
タイムアウト値決定アルゴリズムにより決まる。
rsre(3)の場合には、ＲＦＣ７９３で決められた
LBOUND値である。

The minimum value permitted by a TCP
implementation for the retransmission timeout,
measured in milliseconds.  More refined semantics
for objects of this type depend upon the algorithm
used to determine the retransmission timeout.  In
particular, when the timeout algorithm is rsre(3),
an object of this type has the semantics of the
LBOUND quantity described in RFC 793."

#tcpRtoMax
"このノードＴＣＰプロトコルのインプリメントで
許容されている再送信タイムアウト値の最大値。
この値の詳細は、使用されているアルゴリズムにより
変わる。
rsre(3)のアルゴリズムの場合には、ＲＦＣ７９３で
定義されている。UBOUNDの値である。

The maximum value permitted by a TCP
implementation for the retransmission timeout,
measured in milliseconds.  More refined semantics
for objects of this type depend upon the algorithm
used to determine the retransmission timeout.  In
particular, when the timeout algorithm is rsre(3),
an object of this type has the semantics of the
UBOUND quantity described in RFC 793."

#tcpMaxConn
"このノードがサポートしているＴＣＰ最大接続
数。このエンティティで、最大接続数が動的に変化する場合には
この値はー１に設定される。

The limit on the total number of TCP connections
the entity can support.  In entities where the
maximum number of connections is dynamic, this
object should contain the value -1."

#tcpActiveOpens
"ＴＣＰ接続を能動的に開設した数。
CLOSE状態からSYN_SENT状態に直接以降した数。


The number of times TCP connections have made a
direct transition to the SYN-SENT state from the
CLOSED state."

#tcpPassiveOpens
"ＴＣＰ接続を受動的に開設した数。
LISTEN状態からSYN-RCVD状態への直接移動の回数。

The number of times TCP connections have made a
direct transition to the SYN-RCVD state from the
LISTEN state."

#tcpAttemptFails
"ＴＣＰ接続に失敗した数。
ＴＣＰの状態遷移でつぎの移動が起こった数。
 SYN-SENT -> CLOSED
 SYN_RCVD -> CLOSED
 SYN-RCVD -> LISTEN

The number of times TCP connections have made a
direct transition to the CLOSED state from either
the SYN-SENT state or the SYN-RCVD state, plus the
number of times TCP connections have made a direct
transition to the LISTEN state from the SYN-RCVD
state."

#tcpEstabResets
"ＴＣＰ接続をリセットした数。
TCPの状態遷移で次の移動が起こった数。
 ESTAVLISHED -> CLOSED
  CLOSE-WAIT -> CLOSED


The number of times TCP connections have made a
direct transition to the CLOSED state from either
the ESTABLISHED state or the CLOSE-WAIT state."

#tcpCurrEstab
"現在 ESTABLISGED 又は、CLOSE-WAIT状態にある
ＴＣＰ接続の数。

The number of TCP connections for which the
current state is either ESTABLISHED or CLOSE-
WAIT."

#tcpInSegs
"受信したＴＣＰセグメントの数。
エラーセグメントの数も含まれる。

The total number of segments received, including
those received in error.  This count includes
segments received on currently established
connections."

#tcpOutSegs
"ＴＣＰセグメントを送信した総数。
現在の接続でのＴＣＰセグメント数は含むが、
再送信セグメントの数は含まれない。


The total number of segments sent, including
those on current connections but excluding those
containing only retransmitted octets."

#tcpRetransSegs
"再送信されたセグメントの数。


The total number of segments retransmitted - that
is, the number of TCP segments transmitted
containing one or more previously transmitted
octets."

#tcpConnTable
"ＴＣＰ接続テーブル
A table containing TCP connection-specific
information."

#tcpConnEntry
"特定の現在のＴＣＰ接続に関する情報。

Information about a particular current TCP
connection.  An object of this type is transient,
in that it ceases to exist when (or soon after)
the connection makes the transition to the CLOSED
state."

#tcpConnState
"このＴＣＰ接続の状態。
次の状態がある。

 closed(1)		
 listen(2)		
 synSent(3)
 synReceived(4)
 established(5)
 finWait1(6)
 finWait2(7)
 closeWait(8)
 lastAck(9)
 closing(10)
 timeWait(11)
 deleteTCB(12)

マネージャからは、deleteTCB(12)のみがＳＥＴ可能。
この値をＳＥＴした場合は、ＲＦＣ７９３で定義されている
ように管理ノードのＴＣＢを削除する。結果として
接続は即座に終了する。
切断時にリセットを送信するかどうかは、
インプリメントのオプションである。


The state of this TCP connection.
The only value which may be set by a management
station is deleteTCB(12).  Accordingly, it is
appropriate for an agent to return a `badValue'
response if a management station attempts to set
this object to any other value.
If a management station sets this object to the
value deleteTCB(12), then this has the effect of
deleting the TCB (as defined in RFC 793) of the
corresponding connection on the managed node,
resulting in immediate termination of the
connection.
As an implementation-specific option, a RST
segment may be sent from the managed node to the
other TCP endpoint (note however that RST segments
are not sent reliably)."



#tcpConnLocalAddress
"このＴＣＰ接続のローカルＩＰアドレス。
ＴＣＰ接続状態が、どのＩＰアドレスの
接続も許すLISTEN状態の場合、この値は、
0.0.0.0になる。

The local IP address for this TCP connection.  In
the case of a connection in the listen state which
is willing to accept connections for any IP
interface associated with the node, the value
0.0.0.0 is used."

#tcpConnLocalPort
"このＴＣＰ接続のローカルポート番号
The local port number for this TCP connection."

#tcpConnRemAddress
"このＴＣＰ接続のリモートＩＰアドレス。

The remote IP address for this TCP connection."

#tcpConnRemPort
"このＴＣＰ接続のリモート接続。

The remote port number for this TCP connection."

#tcpInErrs
"エラーセグメント（ＴＣＰチェックサムエラー等）の受信数。

The total number of segments received in error
(e.g., bad TCP checksums)."

#tcpOutRsts
"ＴＣＰ接続をリセットした数。


The number of TCP segments sent containing the
RST flag."

#udpInDatagrams
"ＵＤＰユーザーに配送された受信ＵＤＰデータグラム
の総数。


The total number of UDP datagrams delivered to
UDP users."

#udpNoPorts
"オープンされていないポート宛のＵＤＰ
データグラムの受信数。

The total number of received UDP datagrams for
which there was no application at the destination
port."

#udpInErrors
"受信したＵＤＰデータグラムのうち、宛て先ポートの
アプリケーションの問題で、破棄された数。

The number of received UDP datagrams that could
not be delivered for reasons other than the lack
of an application at the destination port."

#udpOutDatagrams
"ＵＤＰデータグラムを送信した数。

The total number of UDP datagrams sent from this
entity."

#udpTable
"受信待ち状態ＵＤＰポートの情報テーブル。

A table containing UDP listener information."

#udpEntry
"現在の特定ＵＤＰ受信ポート情報。

Information about a particular current UDP
listener."

#udpLocalAddress
"ＵＤＰ受信待ちポートのローカルアドレス。
受信アドレスを指定しない場合、0.0.0.0が設定される。

The local IP address for this UDP listener.  In
the case of a UDP listener which is willing to
accept datagrams for any IP interface associated
with the node, the value 0.0.0.0 is used."

#udpLocalPort
"受信待ちのローカルポート番号。

The local port number for this UDP listener."

#egpInMsgs
"エラーなしでＥＧＰメッセージを受信した数。

The number of EGP messages received without
error."

#egpInErrors
"エラー受信したＥＧＰメッセージの数。

The number of EGP messages received that proved
to be in error."

#egpOutMsgs
"ローカルに生成され送信されたＥＧＰメッセージの数。

The total number of locally generated EGP
messages."

#egpOutErrors
"ローカルに生成され送信しようとしたがリソース
不足等のエラーのために破棄されたＥＧＰメッセージ数。


The number of locally generated EGP messages not
sent due to resource limitations within an EGP
entity."

#egpNeighTable
"ＥＧＰ隣接テーブル。

The EGP neighbor table."

#egpNeighEntry
"隣接関係にあるＥＧの関係についての情報。

Information about this entity's relationship with
a particular EGP neighbor."

#egpNeighState
"このエントリーの隣接ＥＧＰローカルシステムの状態。

The EGP state of the local system with respect to
this entry's EGP neighbor.  Each EGP state is
represented by a value that is one greater than
the numerical value associated with said state in
RFC 904."

#egpNeighAddr
"隣接ＥＧＰのＩＰアドレス。

The IP address of this entry's EGP neighbor."

#egpNeighAs
"このＥＧＰピアーの自律システム。
この隣接自律システム番号が不明の場合０になる。

The autonomous system of this EGP peer.  Zero
should be specified if the autonomous system
number of the neighbor is not yet known."

#egpNeighInMsgs
"このＥＧＰピアーから受信したメッセージ数。
（エラーなし）

The number of EGP messages received without error
from this EGP peer."

#egpNeighInErrs
"このＥＧＰピアーから受信エラーとなった
メッセージの数。

The number of EGP messages received from this EGP
peer that proved to be in error (e.g., bad EGP
checksum)."

#egpNeighOutMsgs
"このＥＧＰピアーに送信したＥＧＰメッセージの数。

The number of locally generated EGP messages to
this EGP peer."

#egpNeighOutErrs
"ローカルに生成されこのピアーに送信しようと
したがエラーのため送信出来なかったＥＧＰメッセージ数。


The number of locally generated EGP messages not
sent to this EGP peer due to resource limitations
within an EGP entity."

#egpNeighInErrMsgs
"このＥＧＰピアーから受信したＥＧＰで定義された
エラーのメッセージの数。


The number of EGP-defined error messages received
from this EGP peer."

#egpNeighOutErrMsgs
"このＥＧＰピアーに送信したＥＧＰで定義されたエラーメッセージの
数。

The number of EGP-defined error messages sent to
this EGP peer."

#egpNeighStateUps
"このＥＧＰピアーがＵＰ状態に以降した数。

The number of EGP state transitions to the UP
state with this EGP peer."

#egpNeighStateDowns
"このＥＧＰピアーがＵＰ状態から他の状態に変更された数。

The number of EGP state transitions from the UP
state to any other state with this EGP peer."

#egpNeighIntervalHello
"ＥＧＰのハローコマンドを再送信する間隔を１００分の１
秒単位で示す。ＲＦＣ９０４のＴ１タイマーとして定義されている
ものである。

The interval between EGP Hello command
retransmissions (in hundredths of a second).  This
represents the t1 timer as defined in RFC 904."

#egpNeighIntervalPoll
"
The interval between EGP poll command
retransmissions (in hundredths of a second).  This
represents the t3 timer as defined in RFC 904."

#egpNeighMode
"ＥＧＰエントリーのポーリングモード。
受動的／能動的

The polling mode of this EGP entity, either
passive or active."

#egpNeighEventTrigger
"オペレーターがスタート／ストップのイベントを
発生させるためのトリガーに使用される制御変数。
この値をリードした場合には、最新の設定値が読み出せる。
最後にネットワーク管理サブシステムが初期化されてから
ＳＥＴが実行されていない場合は、ＳＴＯＰの値を
返す。
ＳＥＴが実行された時、特定の隣接ＧＷでスタート／
ストップのイベントを発生する。
この値は、ＲＦＣ９０４の８ー１０ページに記述されている。


A control variable used to trigger operator-
initiated Start and Stop events.  When read, this
variable always returns the most recent value that
egpNeighEventTrigger was set to.  If it has not
been set since the last initialization of the
network management subsystem on the node, it
returns a value of `stop'.
When set, this variable causes a Start or Stop
event on the specified neighbor, as specified on
pages 8-10 of RFC 904.  Briefly, a Start event
causes an Idle peer to begin neighbor acquisition
and a non-Idle peer to reinitiate neighbor
acquisition.  A stop event causes a non-Idle peer
to return to the Idle state until a Start event
occurs, either via egpNeighEventTrigger or
otherwise."

#egpAs
"このＥＧＰエントリーの自律システム番号

The autonomous system number of this EGP entity."

#snmpInPkts
"このＳＮＭＰエージェントがトランスポートサービスから
受信したＳＮＭＰメッセージの総数。

The total number of Messages delivered to the
SNMP entity from the transport service."

#snmpOutPkts
"トランスポート層に対して送信要求を出した
ＳＮＭＰメッセージの総数。


The total number of SNMP Messages which were
passed from the SNMP protocol entity to the
transport service."

#snmpInBadVersions
"受信したＳＮＭＰメッセージのうち、未サポートの
バージョンのメッセージの総数。

The total number of SNMP Messages which were
delivered to the SNMP protocol entity and were for
an unsupported SNMP version."

#snmpInBadCommunityNames
"受信したＳＮＭＰメッセージのうちCommunity名が
不正のメッセージの総数。

The total number of SNMP Messages delivered to
the SNMP protocol entity which used a SNMP
community name not known to said entity."

#snmpInBadCommunityUses
"受信したＳＮＭＰメッセージのうち、その
Communityに許可されていないオペレーションが指定
されていた数。

The total number of SNMP Messages delivered to
the SNMP protocol entity which represented an SNMP
operation which was not allowed by the SNMP
community named in the Message."

#snmpInASNParseErrs
"受信したＳＮＭＰメッセージをデコード中に
ASN.1又はBERフォーマットでのエラーが検出された
数。

The total number of ASN.1 or BER errors
encountered by the SNMP protocol entity when
decoding received SNMP Messages."

#snmpInTooBigs
"受信ＳＮＭＰ ＰＤＵのうち、エラーステータスが
'tooBigであった数。

The total number of SNMP PDUs which were
delivered to the SNMP protocol entity and for
which the value of the error-status field is
`tooBig'."

#snmpInNoSuchNames
"受信ＳＮＭＰ ＰＤＵのうち、エラーステータスが
'noSuchNameであった数。
The total number of SNMP PDUs which were
delivered to the SNMP protocol entity and for
which the value of the error-status field is
`noSuchName'."

#snmpInBadValues
"受信ＳＮＭＰ ＰＤＵのうち、エラーステータスが
'badValueであった数。
The total number of SNMP PDUs which were
delivered to the SNMP protocol entity and for
which the value of the error-status field is
`badValue'."

#snmpInReadOnlys
"受信ＳＮＭＰ ＰＤＵのうち、エラーステータスが
'readOnlyであった数。

The total number valid SNMP PDUs which were
delivered to the SNMP protocol entity and for
which the value of the error-status field is
`readOnly'.  It should be noted that it is a
protocol error to generate an SNMP PDU which
contains the value `readOnly' in the error-status
field, as such this object is provided as a means
of detecting incorrect implementations of the
SNMP."

#snmpInGenErrs
"エラーステータスがgenErrであるＰＤＵを受信した数。

The total number of SNMP PDUs which were
delivered to the SNMP protocol entity and for
which the value of the error-status field is
`genErr'."

#snmpInTotalReqVars
"Get-Request,Get-Next PDUにより正常に読みだされた
ＭＩＢ オブジェクトの数。

The total number of MIB objects which have been
retrieved successfully by the SNMP protocol entity
as the result of receiving valid SNMP Get-Request
and Get-Next PDUs."

#snmpInTotalSetVars
"ＳＮＭＰ Set-Requestを受信して正常に変更された
ＭＩＢ オブジェクトの総数。

The total number of MIB objects which have been
altered successfully by the SNMP protocol entity
as the result of receiving valid SNMP Set-Request
PDUs."

#snmpInGetRequests
"受信した SNMP Get-Request ＰＤＵの数。

The total number of SNMP Get-Request PDUs which
have been accepted and processed by the SNMP
protocol entity."

#snmpInGetNexts
"受信した SNMP Get-Next PDUの数。

The total number of SNMP Get-Next PDUs which have
been accepted and processed by the SNMP protocol
entity."

#snmpInSetRequests
"受信したSNMP Set-Reuest PDUの数。

The total number of SNMP Set-Request PDUs which
have been accepted and processed by the SNMP
protocol entity."

#snmpInGetResponses
"受信したSNMP Get-Response PDUの数。

The total number of SNMP Get-Response PDUs which
have been accepted and processed by the SNMP
protocol entity."

#snmpInTraps
"ＳＮＭＰ ＴＲＡＰ ＰＤＵを受信した数。

The total number of SNMP Trap PDUs which have
been accepted and processed by the SNMP protocol
entity."

#snmpOutTooBigs
"エラーステータスにtooBigを指定して送信したＰＤＵの数。

The total number of SNMP PDUs which were
generated by the SNMP protocol entity and for
which the value of the error-status field is
`tooBig.'"

#snmpOutNoSuchNames
"エラーステータスにnoSuchNameを設定して送信したＰＤＵの数。

The total number of SNMP PDUs which were
generated by the SNMP protocol entity and for
which the value of the error-status is
`noSuchName'."

#snmpOutBadValues
"エラーステータスにbadValueを設定して送信したＰＤＵ。

The total number of SNMP PDUs which were
generated by the SNMP protocol entity and for
which the value of the error-status field is
`badValue'."

#snmpOutGenErrs
"エラーステータスがgenErrであるＰＤＵを送信した数。

The total number of SNMP PDUs which were
generated by the SNMP protocol entity and for
which the value of the error-status field is
`genErr'."

#snmpOutGetRequests
"送信した SNMP Get-Request PDUの数。

The total number of SNMP Get-Request PDUs which
have been generated by the SNMP protocol entity."

#snmpOutGetNexts
"送信した SNMP Get-Next PDUの数。

The total number of SNMP Get-Next PDUs which have
been generated by the SNMP protocol entity."

#snmpOutSetRequests
"送信したＳＮＭＰ Set-Request PDUの数。

The total number of SNMP Set-Request PDUs which
have been generated by the SNMP protocol entity."

#snmpOutGetResponses
"ＳＮＭＰ Get-Response PDUを送信した数。

The total number of SNMP Get-Response PDUs which
have been generated by the SNMP protocol entity."

#snmpOutTraps
"ＳＮＭＰ ＴＲＡＰ ＰＤＵを送信した総数。

The total number of SNMP Trap PDUs which have
been generated by the SNMP protocol entity."

#snmpEnableAuthenTraps
"エージェントのauthentication-failure TRAP
発生を制御。
 １：ＴＲＡＰを発生。
 ２：ＴＲＡＰを発生しない。


Indicates whether the SNMP agent process is
permitted to generate authentication-failure
traps.  The value of this object overrides any
configuration information; as such, it provides a
means whereby all authentication-failure traps may
be disabled.

Note that it is strongly recommended that this
object be stored in non-volatile memory so that it
remains constant between re-initializations of the
network management system."
